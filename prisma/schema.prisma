generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique(map: "email") @db.VarChar(100)
  password    String       @db.VarChar(255)
  firstName   String?      @db.VarChar(50)
  lastName    String?      @db.VarChar(50)
  phoneNumber String?      @db.VarChar(20)
  role        User_role
  businessId  Int?         // ðŸ‘ˆ Hacerlo opcional
  status      User_status? @default(Active)
  createdAt   DateTime?    @default(now()) @db.Timestamp(0)
  updatedAt   DateTime?    @default(now()) @updatedAt @db.Timestamp(0)

  Business    Business?    @relation(fields: [businessId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_ibfk_1")

  @@index([businessId], map: "businessId")
}


model Activities {
  activity_id   Int       @id @default(autoincrement())
  prospect_id   Int?
  activity_type String?   @db.VarChar(100)
  notes         String?   @db.Text
  activity_date DateTime? @db.DateTime(0)
  created_by    String?   @db.VarChar(100)
  created_at    DateTime? @default(now()) @db.Timestamp(0)

  @@index([prospect_id], map: "fk_prospect_id")
}

model ScheduledEmail {
  id            Int       @id @default(autoincrement())
  subject       String
  body          String    @db.Text
  scheduledTime DateTime
  status        String    // PENDING, SENT, FAILED
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  recipients    ScheduledEmailRecipient[]
}

model ScheduledEmailRecipient {
  id             Int             @id @default(autoincrement())
  email          String
  scheduledEmail ScheduledEmail @relation(fields: [scheduledEmailId], references: [id], onDelete: Cascade)
  scheduledEmailId Int
}


model Business {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  email       String?   @unique(map: "email") @db.VarChar(100)
  phoneNumber String?   @db.VarChar(20)
  address     String?   @db.Text
  website     String?   @db.VarChar(255)
  industry    String?   @db.VarChar(50)
  logo        String?   @db.VarChar(255)
  createdAt   DateTime? @default(now()) @db.Timestamp(0)
  updatedAt   DateTime? @default(now()) @db.Timestamp(0)
  User        User[]
}

model Client {
  client_id    Int               @id @default(autoincrement())
  company_name String?           @db.VarChar(255)
  contact_name String?           @db.VarChar(255)
  position     String?           @db.VarChar(100)
  phone_number String?           @db.VarChar(20)
  email        String?           @db.VarChar(255)
  website      String?           @db.VarChar(255)
  address      String?           @db.VarChar(255)
  city         String?           @db.VarChar(100)
  state        String?           @db.VarChar(100)
  postal_code  String?           @db.VarChar(20)
  country      String?           @db.VarChar(100)
  lead_source  String?           @db.VarChar(100)
  industry     String?           @db.VarChar(100)
  status       String?           @default("Prospect") @db.VarChar(50)
  priority     Clients_priority? @default(Medium)
  assigned_to  String?           @db.VarChar(100)
  tags         String?           @db.VarChar(255)
  comments     String?           @db.VarChar(255)   
  created_at   DateTime?         @default(now()) @db.Timestamp(0)
  updated_at   DateTime?         @default(now()) @db.Timestamp(0)
  Prospect    Prospect[]
  Task        Task[]
}

model Funnel {
  funnel_id    Int           @id @default(autoincrement())
  name         String
  description  String?
  prospect    Prospect[]    // RelaciÃ³n con Prospect
  FunnelStage FunnelStage[] // Relation to the Funnel_Stage model
}

model FunnelStage {
  stage_id     Int      @id @default(autoincrement())
  funnel_id    Int
  name         String
  description  String?
  position     Int
  funnel       Funnel   @relation(fields: [funnel_id], references: [funnel_id])
  
}

model Prospect {
  prospect_id       Int       @id @default(autoincrement())
  client_id         Int?
  funnel_id         Int?
  stage             String?   @db.VarChar(100)
  deal_value        Decimal?  @db.Decimal(10, 2)
  deal_closing_date DateTime? @db.Date
  notes             String?   @db.Text
  created_at        DateTime? @default(now()) @db.Timestamp(0)
  updated_at        DateTime? @default(now()) @db.Timestamp(0)
  Client           Client?  @relation(fields: [client_id], references: [client_id], onDelete: Cascade, onUpdate: NoAction, map: "prospects_ibfk_1")
  Funnel           Funnel?  @relation(fields: [funnel_id], references: [funnel_id], onDelete: Cascade, onUpdate: NoAction, map: "prospects_ibfk_2")

  @@index([client_id], map: "client_id")
  @@index([funnel_id], map: "funnel_id")
}

model EmailTemplate {
  template_id  Int      @id @default(autoincrement())
  title        String   @db.VarChar(255)
  businessId  Int?         // ðŸ‘ˆ Hacerlo opcional
  content      String   @db.Text
  created_at   DateTime @default(now()) @db.Timestamp(0)
  updated_at   DateTime @default(now()) @db.Timestamp(0)
}

model Task {
  task_id     Int             @id @default(autoincrement())
  client_id   Int?
  title       String?         @db.VarChar(255)
  description String?         @db.Text
  due_date    DateTime?       @db.Date
  status      Tasks_status?   @default(Pending)
  priority    Tasks_priority? @default(Medium)
  assigned_to String?         @db.VarChar(100)
  created_at  DateTime?       @default(now()) @db.Timestamp(0)
  updated_at  DateTime?       @default(now()) @db.Timestamp(0)
  Client     Client?        @relation(fields: [client_id], references: [client_id], onDelete: Cascade, onUpdate: NoAction, map: "tasks_ibfk_1")

  @@index([client_id], map: "client_id")
  @@map("Task") // Esto indica que la tabla en la base de datos se llama "Task"
}

enum Tasks_status {
  Pending
  In_Progress @map("In Progress")
  Completed
}

enum Tasks_priority {
  Low
  Medium
  High
}

enum User_role {
  Admin
  Manager
  Sales
  Support
  Customer
}

enum User_status {
  Active
  Inactive
  Suspended
  PENDING_BUSINESS
  PENDING_VERIFICATION
  
}


model EmailVerification {
  id              Int       @id @default(autoincrement())
  email           String    @db.VarChar(100)
  code            String    @db.VarChar(6)
  isVerified      Boolean   @default(false)
  verifiedAt      DateTime? 
  expiresAt       DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([email])
  @@index([code])
  @@map("email_verifications")
}

enum Clients_priority {
  Low
  Medium
  High
}
